local seats = {
	script.Parent.Chair1.Seat,
	script.Parent.Chair2.Seat,
	script.Parent.Chair3.Seat,
	script.Parent.Chair4.Seat,
	script.Parent.Chair5.Seat
}

local debounce = {}
local timerActive = false
local timerDelay = 5 -- wait for 5s
local timerEndTime = 0

local timerLabel = script.Parent.starttimer.BillboardGui.TextLabel
local Debris = game:GetService("Debris")
local partToClone = game.Workspace.Part

-- check seat is occupied by players
local function checkSeat(seatIndex)
	local seat = seats[seatIndex]
	if seat.Occupant ~= nil and not debounce[seatIndex] then
		debounce[seatIndex] = true
		print("Player is in seat ".. seatIndex .. "!")

		if not timerActive then
			timerActive = true
			timerEndTime = tick() + timerDelay
			print("Timer started!")
		end
	elseif seat.Occupant == nil and debounce[seatIndex] then
		debounce[seatIndex] = false
		print("Player has left seat ".. seatIndex .. "!")

		-- stop timer when all seat are ematy
		local allSeatsEmpty = true
		for i = 1, #seats do
			if seats[i].Occupant ~= nil then
				allSeatsEmpty = false
				break
			end
		end

		if allSeatsEmpty then
			timerActive = false
			print("Timer stopped!")
			-- reset the timer textlabel
			timerLabel.Text = ""
		end
	end
end

-- cheak if a player is in it in every farme
game:GetService("RunService").Heartbeat:Connect(function()
	for i = 1, #seats do
		checkSeat(i)
	end

	-- cheak timer is running or not
	if timerActive then
		local remainingTime = timerEndTime - tick()
		if remainingTime <= 0 then
			remainingTime = 0
		end

		-- update the timer textlabel with the remaining time
		timerLabel.Text = string.format("Starting in: %.1f", remainingTime)

		-- cheak timer is done
		if remainingTime <= 0 then
			print("Timer expired!")
			timerActive = false
			timerLabel.Text = ""
			
			local Players = game:GetService("Players")

			for i, seat in ipairs(seats) do
				if seat.Occupant ~= nil then
					local player = Players:GetPlayerFromCharacter(seat.Occupant.Parent)
					if player then
						-- clone ui part to the player
						local partClone = game.Workspace.PartToClone:Clone()
						partClone.Parent = player.PlayerGui
						Debris:AddItem(partClone, 10)
						
						local remoteEvent = Instance.new("RemoteEvent")
						remoteEvent.Name = "TextUpdateEvent"
						remoteEvent.Parent = game.ReplicatedStorage
						
						wait(10)

						remoteEvent.OnServerEvent:Connect(function(player, newText)
							print("Received new text from", player.Name, ":", newText)
							
							local leaderstats = player:FindFirstChild("leaderstats")
							if leaderstats then
								local money = leaderstats:FindFirstChild("Money")
								if money then
									print(player.Name .. " has " .. money.Value .. " money.")
									local newTextNumber = tonumber(newText)
									if newTextNumber then
										local moneyleft = money.Value - newTextNumber
										if money.Value < newTextNumber then
											print("Not enough money server")
										else
											print(moneyleft)
											money.Value = moneyleft
											
											local head = player.Character:FindFirstChild("Head")
											if head then
												local headPos = head.Position
												local lookVector = head.CFrame.LookVector
												local newPos = headPos + (lookVector * 4)

												print("New position: ", newPos)
												
												local clonedPart = partToClone:Clone()

												-- set pos to the cloned part to newpos
												clonedPart.Position = newPos

												-- change textlabel to NewTextNumber
												clonedPart.BillboardGui.TextLabel.Text = "$" .. newTextNumber

												-- parent the cloned part to the workspace
												clonedPart.Parent = game.Workspace
											end
										end
									end
								end
							end
						end)
					end
				end
			end
		end
	end
end)
